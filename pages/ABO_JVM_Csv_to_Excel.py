import streamlit as st
import pandas as pd
import openai
from datetime import datetime
import os
import re

# Configuration de l'API OpenAI
openai.api_key = os.getenv("OPENAI_API_KEY") or st.secrets.get("OPENAI_API_KEY")

def filter_new_subscriptions(df):
    """Envoie toutes les lignes √† OpenAI pour filtrer celles cr√©√©es apr√®s le 5 du mois."""
    if df.empty:
        return df, pd.DataFrame()

    today = datetime.today()
    start_date = datetime(today.year, today.month, 5).strftime('%Y-%m-%d')

    # Conversion de "Created at" en datetime
    df['Created at'] = pd.to_datetime(df['Created at'], errors='coerce')

    # Construire une requ√™te textuelle pour OpenAI
    prompt = f"""
    Tu es un assistant charg√© de filtrer les abonnements.
    Ta t√¢che est de **supprimer toutes les lignes o√π 'Created at' est post√©rieur au {start_date}.**

    üîπ **Format de r√©ponse attendu :**
    - `KEEP: id1, id2, id3` (IDs √† garder)
    - `REMOVE: id4, id5, id6` (IDs √† supprimer)

    Exemple :
    ```
    KEEP: 12345,67890,54321
    REMOVE: 98765,56789,43210
    ```

    Voici les abonnements :
    """

    for index, row in df.iterrows():
        prompt += f"{row['ID']} | Created at: {row['Created at']}\n"

    prompt += "\nüîπ Maintenant, donne-moi uniquement la liste des IDs KEEP et REMOVE."

    client = openai.OpenAI(api_key=openai.api_key)

    response = client.chat.completions.create(
        model="gpt-4-turbo",
        messages=[
            {"role": "system", "content": "Tu es un assistant de filtrage de donn√©es."},
            {"role": "user", "content": prompt}
        ]
    )

    # Affichage de la r√©ponse brute d'OpenAI
    st.write("üîç **R√©ponse brute d'OpenAI (filtrage 'Created at') :**", response)

    # Extraction des ID
    output = response.choices[0].message.content.strip()

    keep_match = re.search(r'KEEP: ([\d, ]+)', output)
    remove_match = re.search(r'REMOVE: ([\d, ]+)', output)

    selected_ids = [int(id_) for id_ in keep_match.group(1).split(',')] if keep_match else []
    removed_ids = [int(id_) for id_ in remove_match.group(1).split(',')] if remove_match else []

    # Filtrer les abonnements conserv√©s et supprim√©s
    kept_df = df[df['ID'].isin(selected_ids)]
    removed_df = df[df['ID'].isin(removed_ids)]

    # Afficher les abonnements supprim√©s
    st.write(f"‚ùå **Abonnements supprim√©s car 'Created at' apr√®s le 5 du mois ({len(removed_df)} lignes) :**")
    st.dataframe(removed_df[['ID', 'Customer name', 'Created at']])

    return kept_df, removed_df


def process_csv(uploaded_files):
    """Lit et traite plusieurs fichiers CSV."""
    all_dataframes = []

    for csv_file in uploaded_files:
        df = pd.read_csv(csv_file)
        all_dataframes.append(df)

    # Fusionner tous les fichiers en un seul DataFrame
    df = pd.concat(all_dataframes, ignore_index=True)

    # V√©rifier la colonne 'Created at'
    if 'Created at' not in df.columns:
        st.error("La colonne 'Created at' est introuvable dans les fichiers CSV.")
        return None, None

    # üéØ **Filtrer les abonnements cr√©√©s apr√®s le 5 du mois avec OpenAI**
    df, removed_df = filter_new_subscriptions(df)

    # V√©rification de la colonne 'Status'
    if 'Status' not in df.columns:
        st.error("La colonne 'Status' est introuvable dans les fichiers CSV.")
        return None, None

    df['Status'] = df['Status'].str.upper()

    # V√©rification de la colonne 'Next order date'
    if 'Next order date' not in df.columns:
        st.error("La colonne 'Next order date' est introuvable dans les fichiers CSV.")
        return None, None

    # Filtrage des abonnements actifs et annul√©s
    active_df = df[df['Status'] == 'ACTIVE']
    cancelled_df = df[df['Status'] == 'CANCELLED']

    # Supprimer les abonnements test (Brice N Guessan / Brice N'Guessan)
    cancelled_df = cancelled_df[~cancelled_df['Customer name'].str.contains(r"Brice N'?Guessan", case=False, na=False, regex=True)]

    return active_df, cancelled_df



def ask_openai_for_filtering(cancelled_df):
    """Envoie les donn√©es des abonnements annul√©s √† OpenAI et r√©cup√®re la liste des ID √† r√©int√©grer."""
    if cancelled_df.empty:
        return pd.DataFrame()

    today = datetime.today()
    start_date = datetime(today.year, today.month, 5).strftime('%Y-%m-%d')

    # Conversion de 'Next order date' en datetime pour √©viter les erreurs
    cancelled_df['Next order date'] = pd.to_datetime(cancelled_df['Next order date'], errors='coerce')

    # Afficher la liste des abonnements annul√©s envoy√©s √† OpenAI
    st.write(f"üìù **Liste des abonnements annul√©s envoy√©s √† OpenAI : {len(cancelled_df)}**")
    st.dataframe(cancelled_df[['ID', 'Customer name', 'Next order date']])

    # V√©rifier si la colonne "Cancellation note" existe
    if 'Cancellation note' in cancelled_df.columns:
        # Filtrer pour supprimer les clients ayant "Remboursement" dans Cancellation note
        cancelled_df = cancelled_df[~cancelled_df['Cancellation note'].str.contains("Remboursement", case=False, na=False)]

        # Afficher le nombre d'abonnements apr√®s suppression des remboursements
        st.write(f"‚ùå **Abonnements apr√®s exclusion des remboursements : {len(cancelled_df)}**")
    else:
        st.write("‚ö†Ô∏è **La colonne 'Cancellation note' n'existe pas dans les fichiers fournis.**")


    # Supprimer les doublons bas√©s sur le Customer name (conserver le premier)
    cancelled_df = cancelled_df.drop_duplicates(subset=['Customer name'], keep='first')

    # Construire une requ√™te textuelle pour OpenAI
    prompt = f"""
    Tu es un assistant charg√© de filtrer les abonnements annul√©s.
    Ta seule t√¢che est d'extraire les ID des abonnements dont la 'Next Order Date' est **apr√®s** le 5 du mois en cours ({start_date}).

    üîπ **Format de r√©ponse attendu :** Une simple liste d'ID s√©par√©s par des virgules **et RIEN D'AUTRE**.
    üîπ **Exemple de r√©ponse correcte :** `12345,67890,54321`
    üîπ **Interdictions :** Ne pas expliquer, ne pas formater autrement. Juste la liste brute des ID.

    Voici la liste des abonnements annul√©s :
    """

    for index, row in cancelled_df.iterrows():
        prompt += f"{row['ID']} ({row['Next order date'].strftime('%Y-%m-%d')})\n"

    prompt += "\nüîπ Maintenant, donne-moi UNIQUEMENT la liste des ID, sans aucun texte suppl√©mentaire."


    client = openai.OpenAI(api_key=openai.api_key)  # Cr√©e un client OpenAI

    response = client.chat.completions.create(
        model="gpt-4-turbo",
        messages=[
            {"role": "system", "content": "Tu es un assistant de filtrage de donn√©es."},
            {"role": "user", "content": prompt}
        ]
    )

    # Affichage de la r√©ponse brute d'OpenAI
    st.write("üîç **R√©ponse brute d'OpenAI :**", response)

    # Extraction des ID retourn√©s par OpenAI
    output = response.choices[0].message.content.strip()
    selected_ids = re.findall(r'\d+', output)  # Extraction des nombres
    selected_ids = [int(id_) for id_ in selected_ids]

    # Filtrer les abonnements annul√©s s√©lectionn√©s
    selected_cancelled_df = cancelled_df[cancelled_df['ID'].isin(selected_ids)]

    # Afficher la liste des abonnements annul√©s s√©lectionn√©s
    st.write(f"‚úÖ **Abonnements annul√©s s√©lectionn√©s par OpenAI ({len(selected_cancelled_df)} lignes) :**")
    st.dataframe(selected_cancelled_df[['ID', 'Next order date']])

    return selected_cancelled_df

def prepare_final_files(df):
    """Pr√©pare le fichier final avec les colonnes n√©cessaires et renomm√©es."""
    column_mapping = {
        "ID": "Customer ID",
        "Customer name": "Delivery name",
        "Delivery address 1": "Delivery address 1",
        "Delivery address 2": "Delivery address 2",
        "Delivery zip": "Delivery zip",
        "Delivery city": "Delivery city",
        "Delivery province code": "Delivery province code",
        "Delivery country code": "Delivery country code",
        "Billing country": "Billing country",
        "Delivery interval count": "Quantity"
    }

    df = df[list(column_mapping.keys())].rename(columns=column_mapping)

    df['Billing country'] = df.apply(
        lambda row: "FRANCE" if pd.isnull(row['Billing country']) and row['Delivery country code'] == "FR" else row['Billing country'],
        axis=1
    )

    final_columns = [
        "Customer ID", "Delivery name", "Delivery address 1", "Delivery address 2",
        "Delivery zip", "Delivery city", "Delivery province code",
        "Delivery country code", "Billing country", "Quantity"
    ]
    return df[final_columns]

# Interface utilisateur Streamlit
st.title("Gestion des abonnements annul√©s et actifs")
file_prefix = st.text_input("Entrez le pr√©fixe pour les fichiers finaux :", "")
uploaded_files = st.file_uploader("T√©l√©versez les fichiers CSV des abonnements", type="csv", accept_multiple_files=True)

if uploaded_files:
    active_df, cancelled_df = process_csv(uploaded_files)

    if active_df is not None and cancelled_df is not None:
        selected_cancelled_df = ask_openai_for_filtering(cancelled_df)

        final_df = pd.concat([active_df, selected_cancelled_df])
        final_df = prepare_final_files(final_df)

        france_df = final_df[final_df['Delivery country code'] == 'FR']
        foreign_df = final_df[final_df['Delivery country code'] != 'FR']

        st.write(f"üìå **Aper√ßu des donn√©es finales pour la France ({len(france_df)} lignes) :**")
        st.dataframe(france_df)

        st.write(f"üìå **Aper√ßu des donn√©es finales pour l'√©tranger ({len(foreign_df)} lignes) :**")
        st.dataframe(foreign_df)


        if file_prefix.strip():
            france_file = f"{file_prefix}_France.xlsx"
            foreign_file = f"{file_prefix}_Etranger.xlsx"

            france_df.to_excel(france_file, index=False)
            foreign_df.to_excel(foreign_file, index=False)

            st.download_button(
                label="üì• T√©l√©charger les donn√©es France",
                data=open(france_file, "rb"),
                file_name=france_file,
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            )

            st.download_button(
                label="üì• T√©l√©charger les donn√©es √âtranger",
                data=open(foreign_file, "rb"),
                file_name=foreign_file,
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            )
        else:
            st.warning("‚ö†Ô∏è Veuillez entrer un pr√©fixe pour les fichiers finaux avant de t√©l√©charger.")
